--Drop table
DROP TABLE BANK_ACCOUNT;
/
DROP TABLE BANK_USER;
/
DROP TABLE HISTORY;
/
--CREATING TABLE
CREATE TABLE BANK_USER (
    BANKUSER_ID INTEGER PRIMARY KEY,
    USERNAME VARCHAR2(100) UNIQUE,
    USERPASSWORD VARCHAR2(100),
    FIRSTNAME VARCHAR2(100),
    LASTNAME VARCHAR2(100),
    ISADMIN INTEGER DEFAULT 0
);
/
CREATE TABLE BANK_ACCOUNT (
    ACCOUNT_ID INTEGER PRIMARY KEY,
    ACCOUNTNAME VARCHAR2(100) NOT NULL,
    BALANCE VARCHAR2(100) DEFAULT 0.00,
    BANKUSER_ID INTEGER NOT NULL
);
/

CREATE TABLE HISTORY (
    HISTORY_ID INTEGER PRIMARY KEY,
    ACCOUNTNAME VARCHAR2(100),
    HIST_DETAILS VARCHAR2(100),
    TRA_TIMESTAMP DATE NOT NULL,
    BANKUSER_ID INTEGER NOT NULL
);
/

--FOREIGN KEY CONSTRAINTS 
ALTER TABLE BANK_ACCOUNT
ADD CONSTRAINT FK_BANK_ACCOUNT_BANK_USER
FOREIGN KEY (BANKUSER_ID) REFERENCES BANK_USER(BANKUSER_ID);
/

ALTER TABLE HISTORY
ADD CONSTRAINT FK_HISTORY_BANK_USER
FOREIGN KEY (BANKUSER_ID) REFERENCES BANK_USER(BANKUSER_ID);
/

--DROPING SEQUENCE
DROP SEQUENCE SQ_BANK_USER_PRIMARY_KEYS;
DROP SEQUENCE SQ_BANK_ACCOUNT_PRIMARY_KEYS;
DROP SEQUENCE SQ_HISTORY_PRIMARY_KEYS;


--SET UP SEQUENCES TO PRODUCE PRIMARY KEYS 
CREATE SEQUENCE SQ_BANK_USER_PRIMARY_KEYS
START WITH 1000
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_BANK_ACCOUNT_PRIMARY_KEYS
START WITH 1000
INCREMENT BY 1;
/

CREATE SEQUENCE SQ_HISTORY_PRIMARY_KEYS
START WITH 1000
INCREMENT BY 1;
/

--TRIGGER
CREATE OR REPLACE TRIGGER TR_INSERT_BANK_USER
BEFORE INSERT ON BANK_USER
FOR EACH ROW
BEGIN
    SELECT SQ_BANK_USER_PRIMARY_KEYS.NEXTVAL INTO :NEW.BANKUSER_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_BANK_ACCOUNT
BEFORE INSERT ON BANK_ACCOUNT
FOR EACH ROW
BEGIN
    SELECT SQ_BANK_ACCOUNT_PRIMARY_KEYS.NEXTVAL INTO :NEW.ACCOUNT_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_HISTORY
BEFORE INSERT ON HISTORY
FOR EACH ROW
BEGIN
    SELECT SQ_HISTORY_PRIMARY_KEYS.NEXTVAL INTO :NEW.HISTORY_ID FROM DUAL;
END;
/

--DEMO INSERT

INSERT INTO BANK_USER VALUES(1,'admin','password','John','Adam',1 );
--INSERT INTO BANK_USER (BANKUSER_ID,USERNAME,USERPASSWORD,FIRSTNAME,LASTNAME) VALUES (1,'REV01','pass4word','Test1','Result');
--INSERT INTO BANK_USER (BANKUSER_ID,USERNAME,USERPASSWORD,FIRSTNAME,LASTNAME) VALUES(1,'REV02','pass4word','Test2','Result' );
--INSERT INTO BANK_ACCOUNT VALUES(1,'Saving',500,1000);
--INSERT INTO BANK_ACCOUNT VALUES(1,'Saving',100,1001);
--INSERT INTO BANK_ACCOUNT VALUES(1,'Saving',100000,1001);
--INSERT INTO BANK_ACCOUNT VALUES(1,'Checking',200,1002);

--SELECT * FROM BANK_ACCOUNT WHERE BANKUSER_ID = 1000;
--SELECT * FROM BANK_ACCOUNT WHERE BANKUSER_ID = 1001;
--DELETE BANK_ACCOUNT WHERE ACCOUNT_ID = 1006;

--SELECT B.BANKUSER_ID,USERNAME,FIRSTNAME,LASTNAME,ACCOUNT_ID,ACCOUNTNAME FROM BANK_USER B INNER JOIN BANK_ACCOUNT A ON B.BANKUSER_ID = A.BANKUSER_ID;
--SELECT USERNAME FROM BANK_USER WHERE USERNAME = 'admin';


--DEPOSIT
CREATE OR REPLACE PROCEDURE DEPOSIT (ACC_ID IN NUMBER,DEPOSIT_AMOUNT IN NUMBER)
IS
BEGIN 
    UPDATE BANK_ACCOUNT
        SET BALANCE = BALANCE + DEPOSIT_AMOUNT
            WHERE ACCOUNT_ID = ACC_ID;
    COMMIT;
END;

--WITHDRAW
CREATE OR REPLACE PROCEDURE WITHDRAW (ACC_ID IN NUMBER,WITHDRAW_AMOUNT IN NUMBER)
IS
BEGIN 
    UPDATE BANK_ACCOUNT
        SET BALANCE = BALANCE - WITHDRAW_AMOUNT
            WHERE ACCOUNT_ID = ACC_ID;
    COMMIT;
END;

--INSERT INTO BANK_ACCOUNT(ACCOUNT_ID,ACCOUNTNAME,BALANCE,bankuser_id) VALUES (2,'SAVINGS',50,22);
--INSERT INTO BANK_ACCOUNT(ACCOUNTNAME,BALANCE,bankuser_id) VALUES ('SAVINGS',50,1000);
--DELETE BANK_ACCOUNT WHERE BANKUSER_ID = 1000;
--DELETE BANK_USER WHERE BANKUSER_ID = 1000;  